// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: custom.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "car.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d92113aa7c18cdf6);
enum class LongitudinalPersonalitySP_d92113aa7c18cdf6: uint16_t {
  AGGRESSIVE,
  MODERATE,
  STANDARD,
  RELAXED,
};
CAPNP_DECLARE_ENUM(LongitudinalPersonalitySP, d92113aa7c18cdf6);
CAPNP_DECLARE_SCHEMA(81c2f05a394cf4af);
CAPNP_DECLARE_SCHEMA(b6a9042bc207bf27);
CAPNP_DECLARE_SCHEMA(88da8426fae53f07);
CAPNP_DECLARE_SCHEMA(a9d235d23de15f34);
CAPNP_DECLARE_SCHEMA(be8ceaa2a89de7dd);
CAPNP_DECLARE_SCHEMA(8cd56244b40afff5);
CAPNP_DECLARE_SCHEMA(f4da5f8564a56edb);
CAPNP_DECLARE_SCHEMA(b5044e038567cd31);
CAPNP_DECLARE_SCHEMA(8e4c2c83a5d25c2d);
CAPNP_DECLARE_SCHEMA(aedffd8f31e7b55d);
CAPNP_DECLARE_SCHEMA(9e7784369b990802);
enum class SpeedLimitControlState_9e7784369b990802: uint16_t {
  INACTIVE,
  TEMP_INACTIVE,
  ADAPTING,
  ACTIVE,
  PRE_ACTIVE,
};
CAPNP_DECLARE_ENUM(SpeedLimitControlState, 9e7784369b990802);
CAPNP_DECLARE_SCHEMA(d1124e845254aeda);
enum class VisionTurnControllerState_d1124e845254aeda: uint16_t {
  DISABLED,
  ENTERING,
  TURNING,
  LEAVING,
};
CAPNP_DECLARE_ENUM(VisionTurnControllerState, d1124e845254aeda);
CAPNP_DECLARE_SCHEMA(b53c44b896b6c446);
enum class LongitudinalPlanSource_b53c44b896b6c446: uint16_t {
  CRUISE,
  LEAD0,
  LEAD1,
  LEAD2,
  E2E,
  TURN,
  LIMIT,
  TURNLIMIT,
};
CAPNP_DECLARE_ENUM(LongitudinalPlanSource, b53c44b896b6c446);
CAPNP_DECLARE_SCHEMA(f35cc4560bbf6ec2);
CAPNP_DECLARE_SCHEMA(da96579883444c35);
CAPNP_DECLARE_SCHEMA(b5a4fa12beedc9ab);
enum class HandsOnWheelState_b5a4fa12beedc9ab: uint16_t {
  NONE,
  OK,
  MINOR,
  WARNING,
  CRITICAL,
  TERMINAL,
};
CAPNP_DECLARE_ENUM(HandsOnWheelState, b5a4fa12beedc9ab);
CAPNP_DECLARE_SCHEMA(80ae746ee2596b11);
CAPNP_DECLARE_SCHEMA(e3ff45a51e47d36d);
enum class DataType_e3ff45a51e47d36d: uint16_t {
  DEFAULT,
  OFFLINE,
  ONLINE,
};
CAPNP_DECLARE_ENUM(DataType, e3ff45a51e47d36d);
CAPNP_DECLARE_SCHEMA(a5cd762cd951a455);
CAPNP_DECLARE_SCHEMA(f98d843bfd7004a3);
CAPNP_DECLARE_SCHEMA(b86e6369214c01c8);
CAPNP_DECLARE_SCHEMA(f416ec09499d9d19);
CAPNP_DECLARE_SCHEMA(a1680744031fdb2d);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

typedef ::capnp::schemas::LongitudinalPersonalitySP_d92113aa7c18cdf6 LongitudinalPersonalitySP;

struct ControlsStateSP {
  ControlsStateSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LateralINDIState;
  struct LateralPIDState;
  struct LateralAngleState;
  struct LateralDebugState;
  struct LateralTorqueState;
  struct LateralCurvatureState;
  struct LateralLQRState;
  struct LateralControlState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81c2f05a394cf4af, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsStateSP::LateralINDIState {
  LateralINDIState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b6a9042bc207bf27, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsStateSP::LateralPIDState {
  LateralPIDState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88da8426fae53f07, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsStateSP::LateralAngleState {
  LateralAngleState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9d235d23de15f34, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsStateSP::LateralDebugState {
  LateralDebugState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be8ceaa2a89de7dd, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsStateSP::LateralTorqueState {
  LateralTorqueState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8cd56244b40afff5, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsStateSP::LateralCurvatureState {
  LateralCurvatureState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4da5f8564a56edb, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsStateSP::LateralLQRState {
  LateralLQRState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5044e038567cd31, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsStateSP::LateralControlState {
  LateralControlState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INDI_STATE,
    PID_STATE,
    ANGLE_STATE,
    DEBUG_STATE,
    TORQUE_STATE,
    CURVATURE_STATE,
    LQR_STATE_D_E_P_R_E_C_A_T_E_D,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e4c2c83a5d25c2d, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LongitudinalPlanSP {
  LongitudinalPlanSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::SpeedLimitControlState_9e7784369b990802 SpeedLimitControlState;

  typedef ::capnp::schemas::VisionTurnControllerState_d1124e845254aeda VisionTurnControllerState;

  typedef ::capnp::schemas::LongitudinalPlanSource_b53c44b896b6c446 LongitudinalPlanSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aedffd8f31e7b55d, 7, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LateralPlanSP {
  LateralPlanSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f35cc4560bbf6ec2, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverMonitoringStateSP {
  DriverMonitoringStateSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::HandsOnWheelState_b5a4fa12beedc9ab HandsOnWheelState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da96579883444c35, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveMapDataSP {
  LiveMapDataSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DataType_e3ff45a51e47d36d DataType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80ae746ee2596b11, 9, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct E2eLongStateSP {
  E2eLongStateSP() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5cd762cd951a455, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelDataV2SP {
  ModelDataV2SP() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f98d843bfd7004a3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved7 {
  CustomReserved7() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b86e6369214c01c8, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved8 {
  CustomReserved8() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f416ec09499d9d19, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CustomReserved9 {
  CustomReserved9() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1680744031fdb2d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ControlsStateSP::Reader {
public:
  typedef ControlsStateSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLateralState() const;
  inline  ::capnp::Text::Reader getLateralState() const;

  inline typename LateralControlState::Reader getLateralControlState() const;

  inline  ::cereal::LongitudinalPersonalitySP getPersonality() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsStateSP::Builder {
public:
  typedef ControlsStateSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLateralState();
  inline  ::capnp::Text::Builder getLateralState();
  inline void setLateralState( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLateralState(unsigned int size);
  inline void adoptLateralState(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLateralState();

  inline typename LateralControlState::Builder getLateralControlState();
  inline typename LateralControlState::Builder initLateralControlState();

  inline  ::cereal::LongitudinalPersonalitySP getPersonality();
  inline void setPersonality( ::cereal::LongitudinalPersonalitySP value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsStateSP::Pipeline {
public:
  typedef ControlsStateSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename LateralControlState::Pipeline getLateralControlState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsStateSP::LateralINDIState::Reader {
public:
  typedef LateralINDIState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsStateSP::LateralINDIState::Builder {
public:
  typedef LateralINDIState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsStateSP::LateralINDIState::Pipeline {
public:
  typedef LateralINDIState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsStateSP::LateralPIDState::Reader {
public:
  typedef LateralPIDState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsStateSP::LateralPIDState::Builder {
public:
  typedef LateralPIDState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsStateSP::LateralPIDState::Pipeline {
public:
  typedef LateralPIDState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsStateSP::LateralAngleState::Reader {
public:
  typedef LateralAngleState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsStateSP::LateralAngleState::Builder {
public:
  typedef LateralAngleState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsStateSP::LateralAngleState::Pipeline {
public:
  typedef LateralAngleState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsStateSP::LateralDebugState::Reader {
public:
  typedef LateralDebugState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsStateSP::LateralDebugState::Builder {
public:
  typedef LateralDebugState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsStateSP::LateralDebugState::Pipeline {
public:
  typedef LateralDebugState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsStateSP::LateralTorqueState::Reader {
public:
  typedef LateralTorqueState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNnLog() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getNnLog() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsStateSP::LateralTorqueState::Builder {
public:
  typedef LateralTorqueState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNnLog();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getNnLog();
  inline void setNnLog( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNnLog(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initNnLog(unsigned int size);
  inline void adoptNnLog(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownNnLog();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsStateSP::LateralTorqueState::Pipeline {
public:
  typedef LateralTorqueState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsStateSP::LateralCurvatureState::Reader {
public:
  typedef LateralCurvatureState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsStateSP::LateralCurvatureState::Builder {
public:
  typedef LateralCurvatureState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsStateSP::LateralCurvatureState::Pipeline {
public:
  typedef LateralCurvatureState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsStateSP::LateralLQRState::Reader {
public:
  typedef LateralLQRState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsStateSP::LateralLQRState::Builder {
public:
  typedef LateralLQRState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsStateSP::LateralLQRState::Pipeline {
public:
  typedef LateralLQRState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsStateSP::LateralControlState::Reader {
public:
  typedef LateralControlState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isIndiState() const;
  inline bool hasIndiState() const;
  inline  ::cereal::ControlsStateSP::LateralINDIState::Reader getIndiState() const;

  inline bool isPidState() const;
  inline bool hasPidState() const;
  inline  ::cereal::ControlsStateSP::LateralPIDState::Reader getPidState() const;

  inline bool isAngleState() const;
  inline bool hasAngleState() const;
  inline  ::cereal::ControlsStateSP::LateralAngleState::Reader getAngleState() const;

  inline bool isDebugState() const;
  inline bool hasDebugState() const;
  inline  ::cereal::ControlsStateSP::LateralDebugState::Reader getDebugState() const;

  inline bool isTorqueState() const;
  inline bool hasTorqueState() const;
  inline  ::cereal::ControlsStateSP::LateralTorqueState::Reader getTorqueState() const;

  inline bool isCurvatureState() const;
  inline bool hasCurvatureState() const;
  inline  ::cereal::ControlsStateSP::LateralCurvatureState::Reader getCurvatureState() const;

  inline bool isLqrStateDEPRECATED() const;
  inline bool hasLqrStateDEPRECATED() const;
  inline  ::cereal::ControlsStateSP::LateralLQRState::Reader getLqrStateDEPRECATED() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsStateSP::LateralControlState::Builder {
public:
  typedef LateralControlState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isIndiState();
  inline bool hasIndiState();
  inline  ::cereal::ControlsStateSP::LateralINDIState::Builder getIndiState();
  inline void setIndiState( ::cereal::ControlsStateSP::LateralINDIState::Reader value);
  inline  ::cereal::ControlsStateSP::LateralINDIState::Builder initIndiState();
  inline void adoptIndiState(::capnp::Orphan< ::cereal::ControlsStateSP::LateralINDIState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralINDIState> disownIndiState();

  inline bool isPidState();
  inline bool hasPidState();
  inline  ::cereal::ControlsStateSP::LateralPIDState::Builder getPidState();
  inline void setPidState( ::cereal::ControlsStateSP::LateralPIDState::Reader value);
  inline  ::cereal::ControlsStateSP::LateralPIDState::Builder initPidState();
  inline void adoptPidState(::capnp::Orphan< ::cereal::ControlsStateSP::LateralPIDState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralPIDState> disownPidState();

  inline bool isAngleState();
  inline bool hasAngleState();
  inline  ::cereal::ControlsStateSP::LateralAngleState::Builder getAngleState();
  inline void setAngleState( ::cereal::ControlsStateSP::LateralAngleState::Reader value);
  inline  ::cereal::ControlsStateSP::LateralAngleState::Builder initAngleState();
  inline void adoptAngleState(::capnp::Orphan< ::cereal::ControlsStateSP::LateralAngleState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralAngleState> disownAngleState();

  inline bool isDebugState();
  inline bool hasDebugState();
  inline  ::cereal::ControlsStateSP::LateralDebugState::Builder getDebugState();
  inline void setDebugState( ::cereal::ControlsStateSP::LateralDebugState::Reader value);
  inline  ::cereal::ControlsStateSP::LateralDebugState::Builder initDebugState();
  inline void adoptDebugState(::capnp::Orphan< ::cereal::ControlsStateSP::LateralDebugState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralDebugState> disownDebugState();

  inline bool isTorqueState();
  inline bool hasTorqueState();
  inline  ::cereal::ControlsStateSP::LateralTorqueState::Builder getTorqueState();
  inline void setTorqueState( ::cereal::ControlsStateSP::LateralTorqueState::Reader value);
  inline  ::cereal::ControlsStateSP::LateralTorqueState::Builder initTorqueState();
  inline void adoptTorqueState(::capnp::Orphan< ::cereal::ControlsStateSP::LateralTorqueState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralTorqueState> disownTorqueState();

  inline bool isCurvatureState();
  inline bool hasCurvatureState();
  inline  ::cereal::ControlsStateSP::LateralCurvatureState::Builder getCurvatureState();
  inline void setCurvatureState( ::cereal::ControlsStateSP::LateralCurvatureState::Reader value);
  inline  ::cereal::ControlsStateSP::LateralCurvatureState::Builder initCurvatureState();
  inline void adoptCurvatureState(::capnp::Orphan< ::cereal::ControlsStateSP::LateralCurvatureState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralCurvatureState> disownCurvatureState();

  inline bool isLqrStateDEPRECATED();
  inline bool hasLqrStateDEPRECATED();
  inline  ::cereal::ControlsStateSP::LateralLQRState::Builder getLqrStateDEPRECATED();
  inline void setLqrStateDEPRECATED( ::cereal::ControlsStateSP::LateralLQRState::Reader value);
  inline  ::cereal::ControlsStateSP::LateralLQRState::Builder initLqrStateDEPRECATED();
  inline void adoptLqrStateDEPRECATED(::capnp::Orphan< ::cereal::ControlsStateSP::LateralLQRState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralLQRState> disownLqrStateDEPRECATED();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsStateSP::LateralControlState::Pipeline {
public:
  typedef LateralControlState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LongitudinalPlanSP::Reader {
public:
  typedef LongitudinalPlanSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::LongitudinalPlanSP::VisionTurnControllerState getVisionTurnControllerState() const;

  inline float getVisionTurnSpeed() const;

  inline  ::cereal::LongitudinalPlanSP::SpeedLimitControlState getSpeedLimitControlState() const;

  inline float getSpeedLimit() const;

  inline float getSpeedLimitOffset() const;

  inline float getDistToSpeedLimit() const;

  inline bool getIsMapSpeedLimit() const;

  inline float getDistToTurn() const;

  inline float getTurnSpeed() const;

  inline  ::cereal::LongitudinalPlanSP::SpeedLimitControlState getTurnSpeedControlState() const;

  inline  ::int16_t getTurnSign() const;

  inline bool getSpeedLimitPercOffset() const;

  inline float getSpeedLimitValueOffset() const;

  inline float getDesiredTF() const;

  inline  ::int16_t getNotSpeedLimit() const;

  inline bool hasE2eX() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getE2eX() const;

  inline float getVisionCurrentLatAcc() const;

  inline float getVisionMaxPredLatAcc() const;

  inline bool hasE2eBlended() const;
  inline  ::capnp::Text::Reader getE2eBlended() const;

  inline bool hasEvents() const;
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader getEvents() const;

  inline  ::cereal::LongitudinalPlanSP::LongitudinalPlanSource getLongitudinalPlanSource() const;

  inline  ::cereal::LongitudinalPersonalitySP getPersonalityDEPRECATED() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LongitudinalPlanSP::Builder {
public:
  typedef LongitudinalPlanSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::LongitudinalPlanSP::VisionTurnControllerState getVisionTurnControllerState();
  inline void setVisionTurnControllerState( ::cereal::LongitudinalPlanSP::VisionTurnControllerState value);

  inline float getVisionTurnSpeed();
  inline void setVisionTurnSpeed(float value);

  inline  ::cereal::LongitudinalPlanSP::SpeedLimitControlState getSpeedLimitControlState();
  inline void setSpeedLimitControlState( ::cereal::LongitudinalPlanSP::SpeedLimitControlState value);

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline float getSpeedLimitOffset();
  inline void setSpeedLimitOffset(float value);

  inline float getDistToSpeedLimit();
  inline void setDistToSpeedLimit(float value);

  inline bool getIsMapSpeedLimit();
  inline void setIsMapSpeedLimit(bool value);

  inline float getDistToTurn();
  inline void setDistToTurn(float value);

  inline float getTurnSpeed();
  inline void setTurnSpeed(float value);

  inline  ::cereal::LongitudinalPlanSP::SpeedLimitControlState getTurnSpeedControlState();
  inline void setTurnSpeedControlState( ::cereal::LongitudinalPlanSP::SpeedLimitControlState value);

  inline  ::int16_t getTurnSign();
  inline void setTurnSign( ::int16_t value);

  inline bool getSpeedLimitPercOffset();
  inline void setSpeedLimitPercOffset(bool value);

  inline float getSpeedLimitValueOffset();
  inline void setSpeedLimitValueOffset(float value);

  inline float getDesiredTF();
  inline void setDesiredTF(float value);

  inline  ::int16_t getNotSpeedLimit();
  inline void setNotSpeedLimit( ::int16_t value);

  inline bool hasE2eX();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getE2eX();
  inline void setE2eX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setE2eX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initE2eX(unsigned int size);
  inline void adoptE2eX(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownE2eX();

  inline float getVisionCurrentLatAcc();
  inline void setVisionCurrentLatAcc(float value);

  inline float getVisionMaxPredLatAcc();
  inline void setVisionMaxPredLatAcc(float value);

  inline bool hasE2eBlended();
  inline  ::capnp::Text::Builder getE2eBlended();
  inline void setE2eBlended( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initE2eBlended(unsigned int size);
  inline void adoptE2eBlended(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownE2eBlended();

  inline bool hasEvents();
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>> disownEvents();

  inline  ::cereal::LongitudinalPlanSP::LongitudinalPlanSource getLongitudinalPlanSource();
  inline void setLongitudinalPlanSource( ::cereal::LongitudinalPlanSP::LongitudinalPlanSource value);

  inline  ::cereal::LongitudinalPersonalitySP getPersonalityDEPRECATED();
  inline void setPersonalityDEPRECATED( ::cereal::LongitudinalPersonalitySP value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LongitudinalPlanSP::Pipeline {
public:
  typedef LongitudinalPlanSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LateralPlanSP::Reader {
public:
  typedef LateralPlanSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getLaneWidth() const;

  inline float getLProb() const;

  inline float getRProb() const;

  inline float getDProb() const;

  inline  ::int8_t getDynamicLaneProfile() const;

  inline float getStandstillElapsed() const;

  inline bool hasDPathWLinesXDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDPathWLinesXDEPRECATED() const;

  inline bool hasDPathWLinesYDEPRECATED() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDPathWLinesYDEPRECATED() const;

  inline bool getLaneChangePrevDEPRECATED() const;

  inline bool getDynamicLaneProfileStatus() const;

  inline bool getLaneChangeEdgeBlockDEPRECATED() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LateralPlanSP::Builder {
public:
  typedef LateralPlanSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getLaneWidth();
  inline void setLaneWidth(float value);

  inline float getLProb();
  inline void setLProb(float value);

  inline float getRProb();
  inline void setRProb(float value);

  inline float getDProb();
  inline void setDProb(float value);

  inline  ::int8_t getDynamicLaneProfile();
  inline void setDynamicLaneProfile( ::int8_t value);

  inline float getStandstillElapsed();
  inline void setStandstillElapsed(float value);

  inline bool hasDPathWLinesXDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDPathWLinesXDEPRECATED();
  inline void setDPathWLinesXDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDPathWLinesXDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDPathWLinesXDEPRECATED(unsigned int size);
  inline void adoptDPathWLinesXDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDPathWLinesXDEPRECATED();

  inline bool hasDPathWLinesYDEPRECATED();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDPathWLinesYDEPRECATED();
  inline void setDPathWLinesYDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDPathWLinesYDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDPathWLinesYDEPRECATED(unsigned int size);
  inline void adoptDPathWLinesYDEPRECATED(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDPathWLinesYDEPRECATED();

  inline bool getLaneChangePrevDEPRECATED();
  inline void setLaneChangePrevDEPRECATED(bool value);

  inline bool getDynamicLaneProfileStatus();
  inline void setDynamicLaneProfileStatus(bool value);

  inline bool getLaneChangeEdgeBlockDEPRECATED();
  inline void setLaneChangeEdgeBlockDEPRECATED(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LateralPlanSP::Pipeline {
public:
  typedef LateralPlanSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverMonitoringStateSP::Reader {
public:
  typedef DriverMonitoringStateSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::DriverMonitoringStateSP::HandsOnWheelState getHandsOnWheelState() const;

  inline float getNotModified() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverMonitoringStateSP::Builder {
public:
  typedef DriverMonitoringStateSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::DriverMonitoringStateSP::HandsOnWheelState getHandsOnWheelState();
  inline void setHandsOnWheelState( ::cereal::DriverMonitoringStateSP::HandsOnWheelState value);

  inline float getNotModified();
  inline void setNotModified(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverMonitoringStateSP::Pipeline {
public:
  typedef DriverMonitoringStateSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveMapDataSP::Reader {
public:
  typedef LiveMapDataSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSpeedLimitValid() const;

  inline float getSpeedLimit() const;

  inline bool getSpeedLimitAheadValid() const;

  inline float getSpeedLimitAhead() const;

  inline float getSpeedLimitAheadDistance() const;

  inline bool getTurnSpeedLimitValid() const;

  inline float getTurnSpeedLimit() const;

  inline float getTurnSpeedLimitEndDistance() const;

  inline  ::int16_t getTurnSpeedLimitSign() const;

  inline bool hasTurnSpeedLimitsAhead() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTurnSpeedLimitsAhead() const;

  inline bool hasTurnSpeedLimitsAheadDistances() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTurnSpeedLimitsAheadDistances() const;

  inline bool hasTurnSpeedLimitsAheadSigns() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getTurnSpeedLimitsAheadSigns() const;

  inline  ::int64_t getLastGpsTimestamp() const;

  inline bool hasCurrentRoadName() const;
  inline  ::capnp::Text::Reader getCurrentRoadName() const;

  inline double getLastGpsLatitude() const;

  inline double getLastGpsLongitude() const;

  inline float getLastGpsSpeed() const;

  inline float getLastGpsBearingDeg() const;

  inline float getLastGpsAccuracy() const;

  inline float getLastGpsBearingAccuracyDeg() const;

  inline  ::cereal::LiveMapDataSP::DataType getDataType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveMapDataSP::Builder {
public:
  typedef LiveMapDataSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSpeedLimitValid();
  inline void setSpeedLimitValid(bool value);

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline bool getSpeedLimitAheadValid();
  inline void setSpeedLimitAheadValid(bool value);

  inline float getSpeedLimitAhead();
  inline void setSpeedLimitAhead(float value);

  inline float getSpeedLimitAheadDistance();
  inline void setSpeedLimitAheadDistance(float value);

  inline bool getTurnSpeedLimitValid();
  inline void setTurnSpeedLimitValid(bool value);

  inline float getTurnSpeedLimit();
  inline void setTurnSpeedLimit(float value);

  inline float getTurnSpeedLimitEndDistance();
  inline void setTurnSpeedLimitEndDistance(float value);

  inline  ::int16_t getTurnSpeedLimitSign();
  inline void setTurnSpeedLimitSign( ::int16_t value);

  inline bool hasTurnSpeedLimitsAhead();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTurnSpeedLimitsAhead();
  inline void setTurnSpeedLimitsAhead( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTurnSpeedLimitsAhead(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTurnSpeedLimitsAhead(unsigned int size);
  inline void adoptTurnSpeedLimitsAhead(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTurnSpeedLimitsAhead();

  inline bool hasTurnSpeedLimitsAheadDistances();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTurnSpeedLimitsAheadDistances();
  inline void setTurnSpeedLimitsAheadDistances( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTurnSpeedLimitsAheadDistances(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTurnSpeedLimitsAheadDistances(unsigned int size);
  inline void adoptTurnSpeedLimitsAheadDistances(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTurnSpeedLimitsAheadDistances();

  inline bool hasTurnSpeedLimitsAheadSigns();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getTurnSpeedLimitsAheadSigns();
  inline void setTurnSpeedLimitsAheadSigns( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTurnSpeedLimitsAheadSigns(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initTurnSpeedLimitsAheadSigns(unsigned int size);
  inline void adoptTurnSpeedLimitsAheadSigns(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownTurnSpeedLimitsAheadSigns();

  inline  ::int64_t getLastGpsTimestamp();
  inline void setLastGpsTimestamp( ::int64_t value);

  inline bool hasCurrentRoadName();
  inline  ::capnp::Text::Builder getCurrentRoadName();
  inline void setCurrentRoadName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCurrentRoadName(unsigned int size);
  inline void adoptCurrentRoadName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCurrentRoadName();

  inline double getLastGpsLatitude();
  inline void setLastGpsLatitude(double value);

  inline double getLastGpsLongitude();
  inline void setLastGpsLongitude(double value);

  inline float getLastGpsSpeed();
  inline void setLastGpsSpeed(float value);

  inline float getLastGpsBearingDeg();
  inline void setLastGpsBearingDeg(float value);

  inline float getLastGpsAccuracy();
  inline void setLastGpsAccuracy(float value);

  inline float getLastGpsBearingAccuracyDeg();
  inline void setLastGpsBearingAccuracyDeg(float value);

  inline  ::cereal::LiveMapDataSP::DataType getDataType();
  inline void setDataType( ::cereal::LiveMapDataSP::DataType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveMapDataSP::Pipeline {
public:
  typedef LiveMapDataSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class E2eLongStateSP::Reader {
public:
  typedef E2eLongStateSP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class E2eLongStateSP::Builder {
public:
  typedef E2eLongStateSP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getStatus();
  inline void setStatus( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class E2eLongStateSP::Pipeline {
public:
  typedef E2eLongStateSP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelDataV2SP::Reader {
public:
  typedef ModelDataV2SP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLaneChangePrev() const;

  inline bool getLaneChangeEdgeBlock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelDataV2SP::Builder {
public:
  typedef ModelDataV2SP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLaneChangePrev();
  inline void setLaneChangePrev(bool value);

  inline bool getLaneChangeEdgeBlock();
  inline void setLaneChangeEdgeBlock(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelDataV2SP::Pipeline {
public:
  typedef ModelDataV2SP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved7::Reader {
public:
  typedef CustomReserved7 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved7::Builder {
public:
  typedef CustomReserved7 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved7::Pipeline {
public:
  typedef CustomReserved7 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved8::Reader {
public:
  typedef CustomReserved8 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved8::Builder {
public:
  typedef CustomReserved8 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved8::Pipeline {
public:
  typedef CustomReserved8 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CustomReserved9::Reader {
public:
  typedef CustomReserved9 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CustomReserved9::Builder {
public:
  typedef CustomReserved9 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CustomReserved9::Pipeline {
public:
  typedef CustomReserved9 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ControlsStateSP::Reader::hasLateralState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsStateSP::Builder::hasLateralState() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsStateSP::Reader::getLateralState() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsStateSP::Builder::getLateralState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::Builder::setLateralState( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsStateSP::Builder::initLateralState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ControlsStateSP::Builder::adoptLateralState(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsStateSP::Builder::disownLateralState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename ControlsStateSP::LateralControlState::Reader ControlsStateSP::Reader::getLateralControlState() const {
  return typename ControlsStateSP::LateralControlState::Reader(_reader);
}
inline typename ControlsStateSP::LateralControlState::Builder ControlsStateSP::Builder::getLateralControlState() {
  return typename ControlsStateSP::LateralControlState::Builder(_builder);
}
#if !CAPNP_LITE
inline typename ControlsStateSP::LateralControlState::Pipeline ControlsStateSP::Pipeline::getLateralControlState() {
  return typename ControlsStateSP::LateralControlState::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename ControlsStateSP::LateralControlState::Builder ControlsStateSP::Builder::initLateralControlState() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename ControlsStateSP::LateralControlState::Builder(_builder);
}
inline  ::cereal::LongitudinalPersonalitySP ControlsStateSP::Reader::getPersonality() const {
  return _reader.getDataField< ::cereal::LongitudinalPersonalitySP>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPersonalitySP ControlsStateSP::Builder::getPersonality() {
  return _builder.getDataField< ::cereal::LongitudinalPersonalitySP>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsStateSP::Builder::setPersonality( ::cereal::LongitudinalPersonalitySP value) {
  _builder.setDataField< ::cereal::LongitudinalPersonalitySP>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsStateSP::LateralTorqueState::Reader::hasNnLog() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsStateSP::LateralTorqueState::Builder::hasNnLog() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ControlsStateSP::LateralTorqueState::Reader::getNnLog() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ControlsStateSP::LateralTorqueState::Builder::getNnLog() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralTorqueState::Builder::setNnLog( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ControlsStateSP::LateralTorqueState::Builder::setNnLog(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ControlsStateSP::LateralTorqueState::Builder::initNnLog(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ControlsStateSP::LateralTorqueState::Builder::adoptNnLog(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ControlsStateSP::LateralTorqueState::Builder::disownNnLog() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::ControlsStateSP::LateralControlState::Which ControlsStateSP::LateralControlState::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::cereal::ControlsStateSP::LateralControlState::Which ControlsStateSP::LateralControlState::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsStateSP::LateralControlState::Reader::isIndiState() const {
  return which() == ControlsStateSP::LateralControlState::INDI_STATE;
}
inline bool ControlsStateSP::LateralControlState::Builder::isIndiState() {
  return which() == ControlsStateSP::LateralControlState::INDI_STATE;
}
inline bool ControlsStateSP::LateralControlState::Reader::hasIndiState() const {
  if (which() != ControlsStateSP::LateralControlState::INDI_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsStateSP::LateralControlState::Builder::hasIndiState() {
  if (which() != ControlsStateSP::LateralControlState::INDI_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsStateSP::LateralINDIState::Reader ControlsStateSP::LateralControlState::Reader::getIndiState() const {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::INDI_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralINDIState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsStateSP::LateralINDIState::Builder ControlsStateSP::LateralControlState::Builder::getIndiState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::INDI_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralINDIState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::setIndiState( ::cereal::ControlsStateSP::LateralINDIState::Reader value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::INDI_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralINDIState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsStateSP::LateralINDIState::Builder ControlsStateSP::LateralControlState::Builder::initIndiState() {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::INDI_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralINDIState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::adoptIndiState(
    ::capnp::Orphan< ::cereal::ControlsStateSP::LateralINDIState>&& value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::INDI_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralINDIState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralINDIState> ControlsStateSP::LateralControlState::Builder::disownIndiState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::INDI_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralINDIState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlsStateSP::LateralControlState::Reader::isPidState() const {
  return which() == ControlsStateSP::LateralControlState::PID_STATE;
}
inline bool ControlsStateSP::LateralControlState::Builder::isPidState() {
  return which() == ControlsStateSP::LateralControlState::PID_STATE;
}
inline bool ControlsStateSP::LateralControlState::Reader::hasPidState() const {
  if (which() != ControlsStateSP::LateralControlState::PID_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsStateSP::LateralControlState::Builder::hasPidState() {
  if (which() != ControlsStateSP::LateralControlState::PID_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsStateSP::LateralPIDState::Reader ControlsStateSP::LateralControlState::Reader::getPidState() const {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralPIDState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsStateSP::LateralPIDState::Builder ControlsStateSP::LateralControlState::Builder::getPidState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralPIDState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::setPidState( ::cereal::ControlsStateSP::LateralPIDState::Reader value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::PID_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralPIDState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsStateSP::LateralPIDState::Builder ControlsStateSP::LateralControlState::Builder::initPidState() {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::PID_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralPIDState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::adoptPidState(
    ::capnp::Orphan< ::cereal::ControlsStateSP::LateralPIDState>&& value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::PID_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralPIDState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralPIDState> ControlsStateSP::LateralControlState::Builder::disownPidState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralPIDState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlsStateSP::LateralControlState::Reader::isAngleState() const {
  return which() == ControlsStateSP::LateralControlState::ANGLE_STATE;
}
inline bool ControlsStateSP::LateralControlState::Builder::isAngleState() {
  return which() == ControlsStateSP::LateralControlState::ANGLE_STATE;
}
inline bool ControlsStateSP::LateralControlState::Reader::hasAngleState() const {
  if (which() != ControlsStateSP::LateralControlState::ANGLE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsStateSP::LateralControlState::Builder::hasAngleState() {
  if (which() != ControlsStateSP::LateralControlState::ANGLE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsStateSP::LateralAngleState::Reader ControlsStateSP::LateralControlState::Reader::getAngleState() const {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::ANGLE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralAngleState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsStateSP::LateralAngleState::Builder ControlsStateSP::LateralControlState::Builder::getAngleState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::ANGLE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralAngleState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::setAngleState( ::cereal::ControlsStateSP::LateralAngleState::Reader value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::ANGLE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralAngleState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsStateSP::LateralAngleState::Builder ControlsStateSP::LateralControlState::Builder::initAngleState() {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::ANGLE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralAngleState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::adoptAngleState(
    ::capnp::Orphan< ::cereal::ControlsStateSP::LateralAngleState>&& value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::ANGLE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralAngleState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralAngleState> ControlsStateSP::LateralControlState::Builder::disownAngleState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::ANGLE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralAngleState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlsStateSP::LateralControlState::Reader::isDebugState() const {
  return which() == ControlsStateSP::LateralControlState::DEBUG_STATE;
}
inline bool ControlsStateSP::LateralControlState::Builder::isDebugState() {
  return which() == ControlsStateSP::LateralControlState::DEBUG_STATE;
}
inline bool ControlsStateSP::LateralControlState::Reader::hasDebugState() const {
  if (which() != ControlsStateSP::LateralControlState::DEBUG_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsStateSP::LateralControlState::Builder::hasDebugState() {
  if (which() != ControlsStateSP::LateralControlState::DEBUG_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsStateSP::LateralDebugState::Reader ControlsStateSP::LateralControlState::Reader::getDebugState() const {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::DEBUG_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralDebugState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsStateSP::LateralDebugState::Builder ControlsStateSP::LateralControlState::Builder::getDebugState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::DEBUG_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralDebugState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::setDebugState( ::cereal::ControlsStateSP::LateralDebugState::Reader value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::DEBUG_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralDebugState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsStateSP::LateralDebugState::Builder ControlsStateSP::LateralControlState::Builder::initDebugState() {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::DEBUG_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralDebugState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::adoptDebugState(
    ::capnp::Orphan< ::cereal::ControlsStateSP::LateralDebugState>&& value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::DEBUG_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralDebugState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralDebugState> ControlsStateSP::LateralControlState::Builder::disownDebugState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::DEBUG_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralDebugState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlsStateSP::LateralControlState::Reader::isTorqueState() const {
  return which() == ControlsStateSP::LateralControlState::TORQUE_STATE;
}
inline bool ControlsStateSP::LateralControlState::Builder::isTorqueState() {
  return which() == ControlsStateSP::LateralControlState::TORQUE_STATE;
}
inline bool ControlsStateSP::LateralControlState::Reader::hasTorqueState() const {
  if (which() != ControlsStateSP::LateralControlState::TORQUE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsStateSP::LateralControlState::Builder::hasTorqueState() {
  if (which() != ControlsStateSP::LateralControlState::TORQUE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsStateSP::LateralTorqueState::Reader ControlsStateSP::LateralControlState::Reader::getTorqueState() const {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::TORQUE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralTorqueState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsStateSP::LateralTorqueState::Builder ControlsStateSP::LateralControlState::Builder::getTorqueState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::TORQUE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralTorqueState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::setTorqueState( ::cereal::ControlsStateSP::LateralTorqueState::Reader value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::TORQUE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralTorqueState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsStateSP::LateralTorqueState::Builder ControlsStateSP::LateralControlState::Builder::initTorqueState() {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::TORQUE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralTorqueState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::adoptTorqueState(
    ::capnp::Orphan< ::cereal::ControlsStateSP::LateralTorqueState>&& value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::TORQUE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralTorqueState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralTorqueState> ControlsStateSP::LateralControlState::Builder::disownTorqueState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::TORQUE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralTorqueState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlsStateSP::LateralControlState::Reader::isCurvatureState() const {
  return which() == ControlsStateSP::LateralControlState::CURVATURE_STATE;
}
inline bool ControlsStateSP::LateralControlState::Builder::isCurvatureState() {
  return which() == ControlsStateSP::LateralControlState::CURVATURE_STATE;
}
inline bool ControlsStateSP::LateralControlState::Reader::hasCurvatureState() const {
  if (which() != ControlsStateSP::LateralControlState::CURVATURE_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsStateSP::LateralControlState::Builder::hasCurvatureState() {
  if (which() != ControlsStateSP::LateralControlState::CURVATURE_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsStateSP::LateralCurvatureState::Reader ControlsStateSP::LateralControlState::Reader::getCurvatureState() const {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::CURVATURE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralCurvatureState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsStateSP::LateralCurvatureState::Builder ControlsStateSP::LateralControlState::Builder::getCurvatureState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::CURVATURE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralCurvatureState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::setCurvatureState( ::cereal::ControlsStateSP::LateralCurvatureState::Reader value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::CURVATURE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralCurvatureState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsStateSP::LateralCurvatureState::Builder ControlsStateSP::LateralControlState::Builder::initCurvatureState() {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::CURVATURE_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralCurvatureState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::adoptCurvatureState(
    ::capnp::Orphan< ::cereal::ControlsStateSP::LateralCurvatureState>&& value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::CURVATURE_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralCurvatureState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralCurvatureState> ControlsStateSP::LateralControlState::Builder::disownCurvatureState() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::CURVATURE_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralCurvatureState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlsStateSP::LateralControlState::Reader::isLqrStateDEPRECATED() const {
  return which() == ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsStateSP::LateralControlState::Builder::isLqrStateDEPRECATED() {
  return which() == ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D;
}
inline bool ControlsStateSP::LateralControlState::Reader::hasLqrStateDEPRECATED() const {
  if (which() != ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsStateSP::LateralControlState::Builder::hasLqrStateDEPRECATED() {
  if (which() != ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsStateSP::LateralLQRState::Reader ControlsStateSP::LateralControlState::Reader::getLqrStateDEPRECATED() const {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralLQRState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsStateSP::LateralLQRState::Builder ControlsStateSP::LateralControlState::Builder::getLqrStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralLQRState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::setLqrStateDEPRECATED( ::cereal::ControlsStateSP::LateralLQRState::Reader value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralLQRState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsStateSP::LateralLQRState::Builder ControlsStateSP::LateralControlState::Builder::initLqrStateDEPRECATED() {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralLQRState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsStateSP::LateralControlState::Builder::adoptLqrStateDEPRECATED(
    ::capnp::Orphan< ::cereal::ControlsStateSP::LateralLQRState>&& value) {
  _builder.setDataField<ControlsStateSP::LateralControlState::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralLQRState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsStateSP::LateralLQRState> ControlsStateSP::LateralControlState::Builder::disownLqrStateDEPRECATED() {
  KJ_IREQUIRE((which() == ControlsStateSP::LateralControlState::LQR_STATE_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsStateSP::LateralLQRState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::cereal::LongitudinalPlanSP::VisionTurnControllerState LongitudinalPlanSP::Reader::getVisionTurnControllerState() const {
  return _reader.getDataField< ::cereal::LongitudinalPlanSP::VisionTurnControllerState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPlanSP::VisionTurnControllerState LongitudinalPlanSP::Builder::getVisionTurnControllerState() {
  return _builder.getDataField< ::cereal::LongitudinalPlanSP::VisionTurnControllerState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setVisionTurnControllerState( ::cereal::LongitudinalPlanSP::VisionTurnControllerState value) {
  _builder.setDataField< ::cereal::LongitudinalPlanSP::VisionTurnControllerState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlanSP::Reader::getVisionTurnSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getVisionTurnSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setVisionTurnSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LongitudinalPlanSP::SpeedLimitControlState LongitudinalPlanSP::Reader::getSpeedLimitControlState() const {
  return _reader.getDataField< ::cereal::LongitudinalPlanSP::SpeedLimitControlState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPlanSP::SpeedLimitControlState LongitudinalPlanSP::Builder::getSpeedLimitControlState() {
  return _builder.getDataField< ::cereal::LongitudinalPlanSP::SpeedLimitControlState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setSpeedLimitControlState( ::cereal::LongitudinalPlanSP::SpeedLimitControlState value) {
  _builder.setDataField< ::cereal::LongitudinalPlanSP::SpeedLimitControlState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlanSP::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlanSP::Reader::getSpeedLimitOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getSpeedLimitOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setSpeedLimitOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlanSP::Reader::getDistToSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getDistToSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setDistToSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlanSP::Reader::getIsMapSpeedLimit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlanSP::Builder::getIsMapSpeedLimit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setIsMapSpeedLimit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlanSP::Reader::getDistToTurn() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getDistToTurn() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setDistToTurn(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlanSP::Reader::getTurnSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getTurnSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setTurnSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LongitudinalPlanSP::SpeedLimitControlState LongitudinalPlanSP::Reader::getTurnSpeedControlState() const {
  return _reader.getDataField< ::cereal::LongitudinalPlanSP::SpeedLimitControlState>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPlanSP::SpeedLimitControlState LongitudinalPlanSP::Builder::getTurnSpeedControlState() {
  return _builder.getDataField< ::cereal::LongitudinalPlanSP::SpeedLimitControlState>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setTurnSpeedControlState( ::cereal::LongitudinalPlanSP::SpeedLimitControlState value) {
  _builder.setDataField< ::cereal::LongitudinalPlanSP::SpeedLimitControlState>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LongitudinalPlanSP::Reader::getTurnSign() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LongitudinalPlanSP::Builder::getTurnSign() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setTurnSign( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlanSP::Reader::getSpeedLimitPercOffset() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}

inline bool LongitudinalPlanSP::Builder::getSpeedLimitPercOffset() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setSpeedLimitPercOffset(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlanSP::Reader::getSpeedLimitValueOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getSpeedLimitValueOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setSpeedLimitValueOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlanSP::Reader::getDesiredTF() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getDesiredTF() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setDesiredTF(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LongitudinalPlanSP::Reader::getNotSpeedLimit() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LongitudinalPlanSP::Builder::getNotSpeedLimit() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setNotSpeedLimit( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlanSP::Reader::hasE2eX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlanSP::Builder::hasE2eX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LongitudinalPlanSP::Reader::getE2eX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlanSP::Builder::getE2eX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LongitudinalPlanSP::Builder::setE2eX( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LongitudinalPlanSP::Builder::setE2eX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LongitudinalPlanSP::Builder::initE2eX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlanSP::Builder::adoptE2eX(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LongitudinalPlanSP::Builder::disownE2eX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float LongitudinalPlanSP::Reader::getVisionCurrentLatAcc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getVisionCurrentLatAcc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setVisionCurrentLatAcc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float LongitudinalPlanSP::Reader::getVisionMaxPredLatAcc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float LongitudinalPlanSP::Builder::getVisionMaxPredLatAcc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setVisionMaxPredLatAcc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool LongitudinalPlanSP::Reader::hasE2eBlended() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlanSP::Builder::hasE2eBlended() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LongitudinalPlanSP::Reader::getE2eBlended() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LongitudinalPlanSP::Builder::getE2eBlended() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LongitudinalPlanSP::Builder::setE2eBlended( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LongitudinalPlanSP::Builder::initE2eBlended(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlanSP::Builder::adoptE2eBlended(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LongitudinalPlanSP::Builder::disownE2eBlended() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LongitudinalPlanSP::Reader::hasEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LongitudinalPlanSP::Builder::hasEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader LongitudinalPlanSP::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder LongitudinalPlanSP::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LongitudinalPlanSP::Builder::setEvents( ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>::Builder LongitudinalPlanSP::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LongitudinalPlanSP::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>> LongitudinalPlanSP::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::LongitudinalPlanSP::LongitudinalPlanSource LongitudinalPlanSP::Reader::getLongitudinalPlanSource() const {
  return _reader.getDataField< ::cereal::LongitudinalPlanSP::LongitudinalPlanSource>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPlanSP::LongitudinalPlanSource LongitudinalPlanSP::Builder::getLongitudinalPlanSource() {
  return _builder.getDataField< ::cereal::LongitudinalPlanSP::LongitudinalPlanSource>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setLongitudinalPlanSource( ::cereal::LongitudinalPlanSP::LongitudinalPlanSource value) {
  _builder.setDataField< ::cereal::LongitudinalPlanSP::LongitudinalPlanSource>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LongitudinalPersonalitySP LongitudinalPlanSP::Reader::getPersonalityDEPRECATED() const {
  return _reader.getDataField< ::cereal::LongitudinalPersonalitySP>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LongitudinalPersonalitySP LongitudinalPlanSP::Builder::getPersonalityDEPRECATED() {
  return _builder.getDataField< ::cereal::LongitudinalPersonalitySP>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void LongitudinalPlanSP::Builder::setPersonalityDEPRECATED( ::cereal::LongitudinalPersonalitySP value) {
  _builder.setDataField< ::cereal::LongitudinalPersonalitySP>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlanSP::Reader::getLaneWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LateralPlanSP::Builder::getLaneWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LateralPlanSP::Builder::setLaneWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlanSP::Reader::getLProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LateralPlanSP::Builder::getLProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LateralPlanSP::Builder::setLProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlanSP::Reader::getRProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LateralPlanSP::Builder::getRProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LateralPlanSP::Builder::setRProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlanSP::Reader::getDProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LateralPlanSP::Builder::getDProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LateralPlanSP::Builder::setDProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t LateralPlanSP::Reader::getDynamicLaneProfile() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::int8_t LateralPlanSP::Builder::getDynamicLaneProfile() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void LateralPlanSP::Builder::setDynamicLaneProfile( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float LateralPlanSP::Reader::getStandstillElapsed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LateralPlanSP::Builder::getStandstillElapsed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LateralPlanSP::Builder::setStandstillElapsed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlanSP::Reader::hasDPathWLinesXDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlanSP::Builder::hasDPathWLinesXDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlanSP::Reader::getDPathWLinesXDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlanSP::Builder::getDPathWLinesXDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LateralPlanSP::Builder::setDPathWLinesXDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LateralPlanSP::Builder::setDPathWLinesXDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlanSP::Builder::initDPathWLinesXDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LateralPlanSP::Builder::adoptDPathWLinesXDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlanSP::Builder::disownDPathWLinesXDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LateralPlanSP::Reader::hasDPathWLinesYDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LateralPlanSP::Builder::hasDPathWLinesYDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LateralPlanSP::Reader::getDPathWLinesYDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlanSP::Builder::getDPathWLinesYDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LateralPlanSP::Builder::setDPathWLinesYDEPRECATED( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LateralPlanSP::Builder::setDPathWLinesYDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LateralPlanSP::Builder::initDPathWLinesYDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LateralPlanSP::Builder::adoptDPathWLinesYDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LateralPlanSP::Builder::disownDPathWLinesYDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LateralPlanSP::Reader::getLaneChangePrevDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<136>() * ::capnp::ELEMENTS);
}

inline bool LateralPlanSP::Builder::getLaneChangePrevDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<136>() * ::capnp::ELEMENTS);
}
inline void LateralPlanSP::Builder::setLaneChangePrevDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<136>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlanSP::Reader::getDynamicLaneProfileStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<137>() * ::capnp::ELEMENTS);
}

inline bool LateralPlanSP::Builder::getDynamicLaneProfileStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<137>() * ::capnp::ELEMENTS);
}
inline void LateralPlanSP::Builder::setDynamicLaneProfileStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<137>() * ::capnp::ELEMENTS, value);
}

inline bool LateralPlanSP::Reader::getLaneChangeEdgeBlockDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<138>() * ::capnp::ELEMENTS);
}

inline bool LateralPlanSP::Builder::getLaneChangeEdgeBlockDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<138>() * ::capnp::ELEMENTS);
}
inline void LateralPlanSP::Builder::setLaneChangeEdgeBlockDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<138>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::DriverMonitoringStateSP::HandsOnWheelState DriverMonitoringStateSP::Reader::getHandsOnWheelState() const {
  return _reader.getDataField< ::cereal::DriverMonitoringStateSP::HandsOnWheelState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::DriverMonitoringStateSP::HandsOnWheelState DriverMonitoringStateSP::Builder::getHandsOnWheelState() {
  return _builder.getDataField< ::cereal::DriverMonitoringStateSP::HandsOnWheelState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringStateSP::Builder::setHandsOnWheelState( ::cereal::DriverMonitoringStateSP::HandsOnWheelState value) {
  _builder.setDataField< ::cereal::DriverMonitoringStateSP::HandsOnWheelState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DriverMonitoringStateSP::Reader::getNotModified() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DriverMonitoringStateSP::Builder::getNotModified() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverMonitoringStateSP::Builder::setNotModified(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataSP::Reader::getSpeedLimitValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataSP::Builder::getSpeedLimitValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimitValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataSP::Reader::getSpeedLimitAheadValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataSP::Builder::getSpeedLimitAheadValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimitAheadValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getSpeedLimitAhead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getSpeedLimitAhead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimitAhead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getSpeedLimitAheadDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getSpeedLimitAheadDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setSpeedLimitAheadDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataSP::Reader::getTurnSpeedLimitValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool LiveMapDataSP::Builder::getTurnSpeedLimitValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimitValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getTurnSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getTurnSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getTurnSpeedLimitEndDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getTurnSpeedLimitEndDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimitEndDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LiveMapDataSP::Reader::getTurnSpeedLimitSign() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LiveMapDataSP::Builder::getTurnSpeedLimitSign() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimitSign( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataSP::Reader::hasTurnSpeedLimitsAhead() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataSP::Builder::hasTurnSpeedLimitsAhead() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMapDataSP::Reader::getTurnSpeedLimitsAhead() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataSP::Builder::getTurnSpeedLimitsAhead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimitsAhead( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimitsAhead(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataSP::Builder::initTurnSpeedLimitsAhead(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveMapDataSP::Builder::adoptTurnSpeedLimitsAhead(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMapDataSP::Builder::disownTurnSpeedLimitsAhead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveMapDataSP::Reader::hasTurnSpeedLimitsAheadDistances() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataSP::Builder::hasTurnSpeedLimitsAheadDistances() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LiveMapDataSP::Reader::getTurnSpeedLimitsAheadDistances() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataSP::Builder::getTurnSpeedLimitsAheadDistances() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimitsAheadDistances( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimitsAheadDistances(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataSP::Builder::initTurnSpeedLimitsAheadDistances(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveMapDataSP::Builder::adoptTurnSpeedLimitsAheadDistances(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LiveMapDataSP::Builder::disownTurnSpeedLimitsAheadDistances() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveMapDataSP::Reader::hasTurnSpeedLimitsAheadSigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataSP::Builder::hasTurnSpeedLimitsAheadSigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader LiveMapDataSP::Reader::getTurnSpeedLimitsAheadSigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataSP::Builder::getTurnSpeedLimitsAheadSigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimitsAheadSigns( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveMapDataSP::Builder::setTurnSpeedLimitsAheadSigns(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder LiveMapDataSP::Builder::initTurnSpeedLimitsAheadSigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveMapDataSP::Builder::adoptTurnSpeedLimitsAheadSigns(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> LiveMapDataSP::Builder::disownTurnSpeedLimitsAheadSigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int64_t LiveMapDataSP::Reader::getLastGpsTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t LiveMapDataSP::Builder::getLastGpsTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setLastGpsTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapDataSP::Reader::hasCurrentRoadName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapDataSP::Builder::hasCurrentRoadName() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveMapDataSP::Reader::getCurrentRoadName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveMapDataSP::Builder::getCurrentRoadName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveMapDataSP::Builder::setCurrentRoadName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveMapDataSP::Builder::initCurrentRoadName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveMapDataSP::Builder::adoptCurrentRoadName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveMapDataSP::Builder::disownCurrentRoadName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline double LiveMapDataSP::Reader::getLastGpsLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double LiveMapDataSP::Builder::getLastGpsLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setLastGpsLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double LiveMapDataSP::Reader::getLastGpsLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double LiveMapDataSP::Builder::getLastGpsLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setLastGpsLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getLastGpsSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getLastGpsSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setLastGpsSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getLastGpsBearingDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getLastGpsBearingDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setLastGpsBearingDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getLastGpsAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getLastGpsAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setLastGpsAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapDataSP::Reader::getLastGpsBearingAccuracyDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float LiveMapDataSP::Builder::getLastGpsBearingAccuracyDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setLastGpsBearingAccuracyDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::LiveMapDataSP::DataType LiveMapDataSP::Reader::getDataType() const {
  return _reader.getDataField< ::cereal::LiveMapDataSP::DataType>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LiveMapDataSP::DataType LiveMapDataSP::Builder::getDataType() {
  return _builder.getDataField< ::cereal::LiveMapDataSP::DataType>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void LiveMapDataSP::Builder::setDataType( ::cereal::LiveMapDataSP::DataType value) {
  _builder.setDataField< ::cereal::LiveMapDataSP::DataType>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t E2eLongStateSP::Reader::getStatus() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t E2eLongStateSP::Builder::getStatus() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void E2eLongStateSP::Builder::setStatus( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2SP::Reader::getLaneChangePrev() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ModelDataV2SP::Builder::getLaneChangePrev() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2SP::Builder::setLaneChangePrev(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelDataV2SP::Reader::getLaneChangeEdgeBlock() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ModelDataV2SP::Builder::getLaneChangeEdgeBlock() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelDataV2SP::Builder::setLaneChangeEdgeBlock(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

}  // namespace

CAPNP_END_HEADER

